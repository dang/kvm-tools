#!/bin/bash
#
# Operate on a virsh cluster
#
# Directory layout:
# <base>/			- Base directory for clusters.  Lots of storage space recommended
#       /BASEIMG/		- Directory containing the base image file and XML templates
#       /clusters/		- Directory containing instantiated cluster
#                /<cname>	- Cluster dir; contains the disk image, and XML used to create the cluster
#
# Commands:
# <none>	- Print info about the named cluster
# --create	- Create a new cluster with the given name and parameters
# --delete	- Delete an existing cluster.  All boxes and networks that can be found are nuked, and the cluster directory.
# --rename	- Rename a cluster.  This invloves deleting the virsh config (but not the disk images) and re-creating, because virsh cannot rename
#
# Environment:
# KVM_CLUSTER_BASE	- This can hold the path to the base of the cluster tree (<base> above).  It defaults to PWD

if [ -n "${KVM_CLUSTER_BASE}" ]; then
	BASEDIR="${KVM_CLUSTER_BASE}"
else
	BASEDIR="${PWD}"
fi

IMGBASE="${BASEDIR}/BASEIMG"
CBASE="clusters"
NUMBOXES=2
NUMNETS=2
COMMAND="unset"

# Set usage output
USAGE="[-h |--help] [-b <base-directory> | --base-directory-base=<base-directory>] [-t <target-dir> | --target-directory=<target-dir>] [-m <number-machines> | --machine-count=<number-machines>] [-n <number-networks> | --network-count=<number-networks>] ((-i <cluster-name> | --info <cluster-name>) (-c <cluster-name> | --create <cluster-name>) | (-d <cluster-name> | --delete <cluster-name>) | (-r <old-cluster-name> <new-cluster-name> | --rename <old-cluster-name> <new-cluster-name>))"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-b <base-directory>, --base-directory=<base-directory>\n\t\tBase cluster image directory. Default: ./${IMGBASE}
\t-t <target-dir>, --target-directory=<target-dir>\n\t\tDirectory to place cluster. Default: ./${CBASE}/<cluster-name>
\t-m <number-machines>, --machine-count=<number-machines>\n\t\tNumber of machines in cluster. Default: ${NUMBOXES}
\t-n <number-networks>, --network-count=<number-networks>\n\t\tNumber of networks in cluster. Default: ${NUMNETS}

\t Commands:
\t-i, --info <cluster-name>\n\t\tPrint info about a cluster
\t-c, --create <cluster-name>\n\t\tCreate a new cluster
\t-d, --delete <cluster-name>\n\t\tDelete an existing cluster
\t-r, --rename <old-cluster-name> <new-cluster-name>\n\t\tRename an existing cluster."

# Standard functions
die() {
	echo "$@"
	exit 1
}

usage() {
	local myusage;
	if [ -n "${USAGE}" ]; then
		myusage=${USAGE}
	else
		myusage="No usage given"
	fi
	if [ -n "$1" ]; then
		echo "$@"
	fi
	echo ""
	echo "Usage:"
	echo "`basename $0` ${myusage}"
	if [ -n "${LONGUSAGE}" ]; then
		echo -e "${LONGUSAGE}"
	fi
	exit 1
}

# Helper functions
setcommand() {
	if [ "${COMMAND}" == "unset" ]; then
		COMMAND="$1"
	else
		usage "Only one command may be given"
	fi
	CNAME=$2
}
pinfo() {
	local cdir="${CDIR}"
	if [ ! -d "${CDIR}" ]; then
		cdir="${CDIR} (does not exist)"
	fi
	echo "$@ cluster ${CNAME}:"
	echo -e "\tDirectory: ${cdir}"
	echo -e "\tBoxes: ${VIRSH_BOXES}"
	echo -e "\tNetworks:"
	for net in ${VIRSH_NETS}; do
		uuid=$(virsh net-info ${net} | grep UUID)
		echo -e "\t\tName:\t\t${net}"
		echo -e "\t\t${uuid}"
	done
}
cmd_exists() {
	which $1 > /dev/null 2>&1
	if [ "$?" == "1" ]; then
		die "You don't have $1 installed, sorry"
	fi
}

# Command functions
cluster_create() {
	if [ -d "${CDIR}" ]; then
		die "cannot create cluster ${CNAME}: directory exists"
	elif [ -n "${VIRSH_BOXES}" ]; then
		die "cannot create cluster ${CNAME}: VMs exist"
	elif [ -n "${VIRSH_NETR}" ]; then
		die "cannot create cluster ${CNAME}: networks exist"
	elif [ ! -d "${IDIR}" ]; then
		die "No image base directory ${IDIR}"
	fi

	CBYTES=$(hexdump -n2 -e '/1 ":%02X"' /dev/urandom)

	echo "Creating cluster ${CNAME}:"
	echo -e "\tDirectory: ${CDIR}"
	echo -e "\tImage Directroy: ${IDIR}"
	echo -e "\tImage Basename: ${IMGBASE}"
	echo -e "\tNumber of boxes: ${NUMBOXES}"
	echo -e "\tNumber of networks: ${NUMNETS}"
	echo -e "\tMAC bytes: ${CBYTES}"

	mkdir -p "${CDIR}" || die "failed to create ${CDIR}"

	for net in $(seq -f '%02.0f' 1 ${NUMNETS}); do
		NNAME="${CDIR}/${CNAME}-net${net}.xml"
		cp "${IDIR}/${IMGBASE}-net-template.xml" "${NNAME}" || die "Failed to copy XML template for ${BNUM}"
		NETBYTE=$((${net} + 20))
		sed -i -e "s#CLUSTERNAME#${CNAME}#" -e "s#NETNUM#${net}#" -e "s#NETBYTE#${NETBYTE}#" -e "s#CBYTES#${CBYTES}#" "${NNAME}"

		virsh net-define "${NNAME}" || die "Couldn't create ${NNAME}"
		virsh net-start "${CNAME}-n${net}" || die "Couldn't start ${CNAME}-n${net}"
	done

	for BNUM in $(seq -f '%02.0f' ${NUMBOXES}); do
		cp --sparse=always "${IDIR}/${IMGBASE}.img" "${CDIR}/${CNAME}-box${BNUM}.img"
		DNAME="${CDIR}/${CNAME}-box${BNUM}.xml"
		cp "${IDIR}/${IMGBASE}-box-template.xml" "${DNAME}" || die "Failed to copy XML template for ${BNUM}"

		IFACES=""
		for net in $(seq -f '%02.0f' ${NUMNETS}); do
			SLOTNUM=$((${net} + 10))
			NIFACE=$(sed -e "s#NETNUM#${net}#" -e "s#CLUSTERNAME#${CNAME}#" -e "s#BNUM#${BNUM}#" -e "s#SLOTNUM#${SLOTNUM}#" -e "s#CBYTES#${CBYTES}#" "${IDIR}/${IMGBASE}-iface-template.xml" | sed '{:q;N;s/\n/\\n/g;t q}')
			IFACES+="${NIFACE}\n"
		done

		sed -i -e "s#CLUSTERNAME#${CNAME}#" -e "s#BNUM#${BNUM}#" -e "s#CDIR#$CDIR#" -e "s#CBYTES#${CBYTES}#" -e "s#IFACES#${IFACES}#" ${DNAME}
		virsh define "${DNAME}" || die "Couldn't define ${DNAME}"
	done

	echo "Cluster ${CNAME} complete."
}

cluster_delete() {
	# Always try and delete cluster, so left-over parts can be nuked
	pinfo "Deleting"

	for box in ${VIRSH_BOXES}; do
		virsh destroy ${box} > /dev/null 2>&1
		virsh undefine ${box} || die "Failed to undefine ${box}"
	done
	for net in ${VIRSH_NETS}; do
		virsh net-destroy ${net} || die "Failed to destroy ${net}"
		virsh net-undefine ${net}  > /dev/null 2>&1 # may have been non-persistant
	done
	if [ -d "${CDIR}" ]; then
		rm -rf "${CDIR}" || die "Failed to remove ${CDIR}"
	fi
	exit
}

cluster_rename() {
	if [ -z "${NEWCNAME}" ]; then
		usage "--rename requires a new cluster name"
	elif [ ! -d "${CDIR}" ]; then
		die "cannot rename cluster ${CNAME}: directory does not exist"
	elif [ -z "${VIRSH_BOXES}" ]; then
		die "cannot rename cluster ${CNAME}: VMs do not exist"
	fi
	echo "Renaming cluster ${CNAME} to ${NEWNAME}"
	pinfo "Original"

	TDIR=$(mktemp -d)

	# Power them all down
	for box in ${VIRSH_BOXES}; do
		virsh destroy ${box} > /dev/null 2>&1
	done

	# Move dir, rename files
	newdir=${CDIR/${CNAME}/${NEWCNAME}}
	sudo mv "${CDIR}" "${newdir}"

	# Rename the neworks
	for net in ${VIRSH_NETS}; do
		if [[ $net =~ pnet ]]; then
			newnet=${net/${CNAME}-pnet/${NEWCNAME}-n}
			oldfbase=${net/${CNAME}-pnet/${CNAME}-net}
			newfbase=${newnet/${NEWCNAME}-pnet/${NEWCNAME}-net}
		else
			newnet=${net/${CNAME}/${NEWCNAME}}
			oldfbase=${net/${CNAME}-n/${CNAME}-net}
			newfbase=${newnet/${NEWCNAME}-n/${NEWCNAME}-net}
		fi
		virsh net-dumpxml ${net} > "${TDIR}/${newnet}.xml" || die "Failed to dump ${net}"
		virsh net-destroy ${net} || die "Failed to destroy ${net}"
		virsh net-undefine ${net}  > /dev/null 2>&1 # may have been non-persistant
		sudo mv "${newdir}/${oldfbase}.xml" "${newdir}/${newfbase}.xml"
		for f in "${TDIR}/${newnet}.xml" "${newdir}/${newfbase}.xml"; do
			sed -i  -e "s#<name>${net}</name>#<name>${newnet}</name>#g" \
				-e "s#virbr-${CNAME}#virbr-${NEWCNAME}#g" \
				-e "s#pnet#n#g" \
				"${f}"
		done
		virsh net-define "${TDIR}/${newnet}.xml" || die "Couldn't create ${newnet}"
		virsh net-start "${newnet}" || die "Couldn't start ${newnet}"
	done

	# Rename boxes
	for box in ${VIRSH_BOXES}; do
		newbox=${box/${CNAME}/${NEWCNAME}}
		oldfbase=${box/${CNAME}-/${CNAME}-box}
		newfbase=${newbox/${NEWCNAME}-/${NEWCNAME}-box}
		virsh dumpxml ${box} > "${TDIR}/${newbox}.xml" || die "Failed to dump ${box}"
		virsh undefine ${box} || die "Failed to destroy ${box}"
		sudo mv "${newdir}/${oldfbase}.img" "${newdir}/${newfbase}.img"
		sudo mv "${newdir}/${oldfbase}.xml" "${newdir}/${newfbase}.xml"
		for f in "${TDIR}/${newbox}.xml" "${newdir}/${newfbase}.xml"; do
			sed -i  -e "s#<name>${box}</name>#<name>${newbox}</name>#g" \
				-e "s#<source file='${CDIR}/${oldfbase}#<source file='${newdir}/${newfbase}#g" \
				-e "s#<source network='${CNAME}#<source network='${NEWCNAME}#g" \
				-e "s#pnet#n#g" \
				"${f}"
		done
		virsh define "${TDIR}/${newbox}.xml" || die "Couldn't create ${newbox}"
	done

	rm -rf "${TDIR}"

	echo "Renamed cluster ${CNAME} to ${NEWCNAME}"
}

cluster_info() {
	pinfo "Info on"
}

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hb:t:m:n:i:c:d:r: --long help,base-directory:,target-directory:,machine-count:,network-count:,info:,create:,delete:,rename: -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage "invalid arguments"
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-b|--base-directory) IMGBASE=$2 ; shift 2 ;;
		-t|--target-directory) CDIR=$2 ; shift 2 ;;
		-m|--machine-count) NUMBOXES=$2 ; shift 2 ;;
		-n|--network-count) NUMNETS=$2 ; shift 2 ;;
		-i|--info) setcommand "info" $2; shift 2;;
		-c|--create) setcommand "create" $2; shift 2;;
		-d|--delete) setcommand "delete" $2; shift 2;;
		-r|--rename) setcommand "rename" $2; shift 2;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal

# Argument checking
case "${COMMAND}" in
	"create")
		;;
	"delete")
		;;
	"rename")
		if [ -z "$1" ]; then
			usage "--rename requires two parameters"
		fi
		NEWCNAME=$1
		;;
	"info")
		;;
	"unset")
		usage "No command given"
		;;
	* ) usage "Unknown command ${COMMAND}";;
esac

if [ -z "${CDIR}" ]; then
	CDIR="${BASEDIR}/${CBASE}/${CNAME}"
fi
IDIR=$(readlink -f "${IMGBASE}")
IMGBASE=$(basename "${IDIR}")

if [ ! -d "${BASEDIR}/${CBASE}" ]; then
	die "Could not find cluster base directory: ${BASEDIR}/${CBASE}"
elif [ ! -d "${IDIR}" ]; then
	die "Could not find image base directory: ${IDIR}"
fi

cmd_exists virsh
VIRSH_BOXES=$(virsh list --all | egrep "${CNAME}-[0-9]" | awk '{printf "%s ", $2}')
VIRSH_NETS=$(virsh net-list --all | egrep "(${CNAME}-pnet[0-9])|(${CNAME}-n[0-9])" | awk '{printf "%s ", $1}')
# Check parameters
case "${COMMAND}" in
	"create")
		cluster_create
		;;
	"delete")
		cluster_delete
		;;
	"rename")
		cluster_rename
		;;
	"info")
		cluster_info
		;;
	* ) usage "Unknown command ${COMMAND}";;
esac


