#!/bin/bash
#
# Operate on a virsh cluster

BASEDIR="${PWD}"

IMGBASE="BASEIMG"
CBASE="clusters"
NUMBOXES=2
NUMNETS=2
COMMAND="info"

# Set usage output
USAGE="[-h |--help] [-i <image-base> | --image-base=<image-base>] [-t <target-dir> | --target-directory=<target-dir>] [-b <number-boxes> | --number-boxes=<number-boxes>] [-n <number-networks> | --number-networks=<number-networks>] [(-c | --create) | (-d | --delete) | (-r | --rename)] <cluster-name> [<new-cluster-name>]"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-i <image-base>, --image-base=<image-base>\n\t\tBase cluster image. Default: ./${IMGBASE}
\t-t <target-dir>, --target-directory=<target-dir>\n\t\tDirectory to place cluster. Default: ./${CBASE}/<cluster-name>
\t-b <number-boxes>, --number-boxes=<number-boxes>\n\t\tNumber of boxes in cluster. Default: ${NUMBOXES}
\t-n <number-networks>, --number-networks=<number-networks>\n\t\tNumber of networks in cluster. Default: ${NUMNETS}
\t<cluster-name>\n\t\tName of cluster on which to operate
\t<new-cluster-name>\n\t\tFor rename, new name of cluster

\t Commands:
\t-c, --create\n\t\tCreate a new cluster
\t-d, --delete\n\t\tDelete an existing cluster
\t-r, --rename\n\t\tRename an existing cluster.  Requires extra name parameter

\t If no command is given, information about the cluster is printed"

# Standard functions
die() {
	echo "$@"
	exit 1
}

usage() {
	local myusage;
	if [ -n "${USAGE}" ]; then
		myusage=${USAGE}
	else
		myusage="No usage given"
	fi
	if [ -n "$1" ]; then
		echo "$@"
	fi
	echo ""
	echo "Usage:"
	echo "`basename $0` ${myusage}"
	if [ -n "${LONGUSAGE}" ]; then
		echo -e "${LONGUSAGE}"
	fi
	exit 1
}

# Helper functions
setcommand() {
	if [ "${COMMAND}" == "info" ]; then
		COMMAND="$1"
	else
		usage "Only one command may be given"
	fi
}
pinfo() {
	echo "$@ cluster ${CNAME}:"
	echo -e "\tDirectory: ${CDIR}"
	echo -e "\tBoxes: ${VIRSH_BOXES}"
	echo -e "\tNetworks: ${VIRSH_NETS}"
}
cmd_exists() {
	which $1 > /dev/null 2>&1
	if [ "$?" == "1" ]; then
		die "You don't have $1 installed, sorry"
	fi
}

# Command functions
cluster_create() {
	if [ -d "${CDIR}" ]; then
		die "cannot create cluster ${CNAME}: directory exists"
	elif [ -n "${VIRSH_BOXES}" ]; then
		die "cannot create cluster ${CNAME}: VMs exist"
	elif [ -n "${VIRSH_NETR}" ]; then
		die "cannot create cluster ${CNAME}: networks exist"
	elif [ ! -d "${IDIR}" ]; then
		die "No image base directory ${IDIR}"
	fi

	CBYTES=$(hexdump -n2 -e '/1 ":%02X"' /dev/urandom)

	echo "Creating cluster ${CNAME}:"
	echo -e "\tDirectory: ${CDIR}"
	echo -e "\tImage Directroy: ${IDIR}"
	echo -e "\tImage Basename: ${IMGBASE}"
	echo -e "\tNumber of boxes: ${NUMBOXES}"
	echo -e "\tNumber of networks: ${NUMNETS}"
	echo -e "\tMAC bytes: ${CBYTES}"

	mkdir -p "${CDIR}" || die "failed to create ${CDIR}"

	for net in $(seq -f '%02.0f' 1 ${NUMNETS}); do
		NNAME="${CDIR}/${CNAME}-net${net}.xml"
		cp "${IDIR}/${IMGBASE}-net-template.xml" "${NNAME}" || die "Failed to copy XML template for ${BNUM}"
		NETBYTE=$((${net} + 20))
		sed -i -e "s#CLUSTERNAME#${CNAME}#" -e "s#NETNUM#${net}#" -e "s#NETBYTE#${NETBYTE}#" -e "s#CBYTES#${CBYTES}#" "${NNAME}"

		virsh net-create "${NNAME}" || die "Couldn't create ${NNAME}"
	done

	for BNUM in $(seq -f '%02.0f' ${NUMBOXES}); do
		cp --sparse=always "${IDIR}/${IMGBASE}.img" "${CDIR}/${CNAME}-box${BNUM}.img"
		DNAME="${CDIR}/${CNAME}-box${BNUM}.xml"
		cp "${IDIR}/${IMGBASE}-box-template.xml" "${DNAME}" || die "Failed to copy XML template for ${BNUM}"

		IFACES=""
		for net in $(seq -f '%02.0f' ${NUMNETS}); do
			SLOTNUM=$((${net} + 10))
			NIFACE=$(sed -e "s#NETNUM#${net}#" -e "s#CLUSTERNAME#${CNAME}#" -e "s#BNUM#${BNUM}#" -e "s#SLOTNUM#${SLOTNUM}#" -e "s#CBYTES#${CBYTES}#" "${IDIR}/${IMGBASE}-iface-template.xml" | sed '{:q;N;s/\n/\\n/g;t q}')
			IFACES+="${NIFACE}\n"
		done

		sed -i -e "s#CLUSTERNAME#${CNAME}#" -e "s#BNUM#${BNUM}#" -e "s#CDIR#$CDIR#" -e "s#CBYTES#${CBYTES}#" -e "s#IFACES#${IFACES}#" ${DNAME}
		virsh define "${DNAME}" || die "Couldn't define ${DNAME}"
	done

	echo "Cluster ${CNAME} complete."
}

cluster_delete() {
	# Always try and delete cluster, so left-over parts can be nuked
	pinfo "Deleting"

	for box in ${VIRSH_BOXES}; do
		virsh destroy ${box}
		virsh undefine ${box} || die "Failed to undefine ${box}"
	done
	for net in ${VIRSH_NETS}; do
		virsh net-destroy ${net} || die "Failed to destroy ${net}"
		#virsh net-undefine ${net} || die "Failed to undefine ${net}"
	done
	if [ -d "${CDIR}" ]; then
		rm -rf "${CDIR}" || die "Failed to remove ${CDIR}"
	fi
	exit
}

cluster_rename() {
	if [ -z "${NEWCNAME}" ]; then
		usage "--rename requires a new cluster name"
	elif [ ! -d "${CDIR}" ]; then
		die "cannot rename cluster ${CNAME}: directory does not exist"
	elif [ -z "${VIRSH_BOXES}" ]; then
		die "cannot rename cluster ${CNAME}: VMs do not exist"
	fi
	echo "Renaming cluster ${CNAME} to ${NEWNAME}"
	# Don't need extra networks
}

cluster_info() {
	pinfo "Info on"
}

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hi:t:b:n:cdr --long help,image-base:,target-directory:,number-boxes,:number-networks:,create,delete,rename -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage "invalid arguments"
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-i|--image-base) IMGBASE=$2 ; shift 2 ;;
		-t|--target-directory) CDIR=$2 ; shift 2 ;;
		-b|--number-boxes) NUMBOXES=$2 ; shift 2 ;;
		-n|--number-networks) NUMNETS=$2 ; shift 2 ;;
		-c|--create) setcommand "create"; shift;;
		-d|--delete) setcommand "delete"; shift ;;
		-r|--rename) setcommand "rename"; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal

if [ -z "${1}" ]; then
	usage "No cluster name given"
else
	CNAME="${1}"
fi

if [ -n "${2}" ]; then
	NEWCNAME="${2}"
fi

if [ -z "${CDIR}" ]; then
	CDIR="${BASEDIR}/${CBASE}/${CNAME}"
fi

cmd_exists virsh
VIRSH_BOXES=$(virsh list --all | grep "${CNAME}-" | awk '{printf "%s ", $2}')
VIRSH_NETS=$(virsh net-list --all | grep "${CNAME}-p" | awk '{printf "%s ", $1}')
IDIR=$(readlink -f "${IMGBASE}")
# Check parameters
case "${COMMAND}" in
	"create")
		cluster_create
		;;
	"delete")
		cluster_delete
		;;
	"rename")
		cluster_rename
		;;
	"info")
		cluster_info
		;;
	* ) usage "Unknown command ${COMMAND}";;
esac


